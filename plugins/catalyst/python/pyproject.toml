# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

[build-system]
requires = [
  "scikit-build-core>=0.11.1",
  "setuptools-scm>=8.2",
  "pybind11>=2.13.6",
  "mqt-core>=3.0.0",
  "pennylane @ https://test-files.pythonhosted.org/packages/a4/ae/b8b0fdcd91fe0e87d699d46938cfee0531e8093042dd9eff11abc247c02f/pennylane-0.42.0.dev27-py3-none-any.whl",
  "pennylane-lightning @ https://test-files.pythonhosted.org/packages/4d/99/1cab1348e3b839f0c8df515dc6b2d347c5e913361ff65e6fa1f197c0a67a/pennylane_lightning-0.42.0.dev16-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-lightning-kokkos @ https://test-files.pythonhosted.org/packages/25/97/9707f73d2ed6e2549e4e099d0083481c144e984227e147b44cd2838535e6/pennylane_lightning_kokkos-0.42.0.dev16-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-catalyst @ file:///Users/yannick/Documents/TUM/CDA/Research/playgrounds/Catalyst/catalyst/dist/pennylane_catalyst-0.12.0.dev36-cp312-abi3-macosx_15_0_universal2.whl",
]
build-backend = "scikit_build_core.build"

[project]
name = "mqt-catalyst-plugin"
description = "The Munich Quantum Toolkit's Catalyst Plugin"
readme = "../../../README.md"
authors = [
    { name = "Patrick Hopf", email = "patrick.hopf@tum.de" },
    { name = "Yannick Stade", email = "yannick.stade@tum.de" },
    { name = "Lukas Burgholzer", email = "burgholzer@me.com" }
]
keywords = ["MQT", "quantum-computing", "design-automation", "catalyst", "MLIR", "plugin"]
license = "MIT"
# we have to duplicate the license file here because scikit_build_core requires
# "the pattern [specifying the license file] must match files within the project directory"
license-files = ["LICENSE.md"]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: C++",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
  "Typing :: Typed",
]
requires-python = ">=3.9"
dynamic = ["version"]

[project.scripts]
mqt-catalyst-cli = "mqt.catalyst.__main__:main"

[project.urls]
Homepage = "https://github.com/munich-quantum-toolkit/core"
Changelog = "https://github.com/munich-quantum-toolkit/core/blob/main/CHANGELOG.md"
Documentation = "https://mqt.readthedocs.io/projects/core"
Issues = "https://github.com/munich-quantum-toolkit/core/issues"
Discussions = "https://github.com/munich-quantum-toolkit/core/discussions"
PyPI = "https://pypi.org/project/mqt-core/"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"

# Set the wheel install directory
wheel.install-dir = "mqt/catalyst"

# Explicitly set the package directory
wheel.packages = ["python/src/mqt"]

# Set required Ninja version
ninja.version = ">=1.10"

# Setuptools-style build caching in a local directory
build-dir = "../../../build/mqt-catalyst-plugin/{wheel_tag}/{build_type}"

# All the targets to build
build.targets = [
  "mqt-catalyst-plugin",
]

# All components to install
install.components = [
  "mqt-catalyst-plugin",
]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["python/src/mqt/catalyst/_version.py"]
sdist.exclude = []

[tool.check-sdist]
sdist-only = ["python/src/mqt/catalyst/_version.py"]
git-only = []

[tool.scikit-build.cmake]
source-dir = "../../.."

[tool.scikit-build.cmake.define]
BUILD_MQT_CORE_TESTS = "OFF"
BUILD_MQT_CORE_SHARED_LIBS = "ON"
BUILD_MQT_CORE_MLIR = "ON"
BUILD_MQT_CORE_CATALYST_PLUGIN = "ON"
# todo: How can that be done such that it works locally and in CI?
MLIR_DIR = "/opt/homebrew/opt/llvm@19/lib/cmake/mlir"
LLVM_EXTERNAL_LIT = "/opt/homebrew/opt/lit/bin/lit"

[tool.setuptools_scm]
write_to = "plugins/catalyst/python/src/mqt/catalyst/_version.py"
root = "../../.."

[tool.check-wheel-contents]
ignore = [
  "W002", # Wheel contains duplicate files (.so symlinks)
  "W004", # Module is not located at importable path (/lib/mqt-core-*.so)
]

[tool.pytest.ini_options]
minversion = "7.2"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
  'ignore:\s.*Pyarrow.*:DeprecationWarning:',
  'ignore:.*datetime\.datetime\.utcfromtimestamp.*:DeprecationWarning:',
]
log_cli_level = "INFO"
testpaths = ["test/python"]

[tool.coverage]
run.source = ["mqt.catalyst"]
run.omit = []
report.exclude_also = [
  '\.\.\.',
  'if TYPE_CHECKING:',
  'raise AssertionError',
  'raise NotImplementedError',
  'def __dir__()',  # Ignore __dir__ method that exists mainly for better IDE support
  '@overload'  # Overloads are only for static typing
]

[tool.mypy]
files = ["python"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/python"]
python_version = "3.9"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.ruff]
line-length = 120
namespace-packages = ["mqt"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "C90",     # <...> too complex
    "COM812",  # Conflicts with formatter
    "CPY001",  # Missing copyright notice at top of file
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "S101",    # Use of assert detected
    "S404",    # `subprocess` module is possibly insecure
    "TID252"   # Prefer absolute imports over relative imports from parent modules
]
# todo: can the module be used from mqt-core?
typing-modules = ["mqt.core._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.assert_never".msg = "Use mqt.core._compat.typing.assert_never instead."

[tool.ruff.lint.per-file-ignores]
# todo: remove the following lines and fix the python files themselves
"src/mqt/catalyst/__init__.py" = ["ALL"]
"test/**" = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.typos]
default.extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
  "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]

[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
mch = "mch"
ket = "ket"

[tool.repo-review]
ignore = ["GH200"]

[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-groups = ["test"]
test-command = "pytest {project}/test/python"
build-frontend = "build[uv]"
enable = ["cpython-freethreading"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"
test-skip = [
  "cp3*t-*", # no freethreading qiskit wheels
  "cp*-win_arm64", # no numpy, qiskit, ... wheels
]

[tool.cibuildwheel.linux]
environment = { DEPLOY = "ON" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.uv]
required-version = ">=0.5.20"
reinstall-package = ["mqt-catalyst-plugin"]

[tool.uv.sources]
mqt-catalyst-plugin = { workspace = true }

[dependency-groups]
build = [
  "pybind11>=2.13.6",
  "scikit-build-core>=0.11.1",
  "setuptools-scm>=8.2",
  "mqt-core>=3.0.0",
  "pennylane @ https://test-files.pythonhosted.org/packages/1d/98/77b1216322c6cb65f5e01896912d40bf2ec47ef059db90e009fde22d7100/pennylane-0.42.0.dev19-py3-none-any.whl",
  "pennylane-lightning @ https://test-files.pythonhosted.org/packages/c4/4e/ee935f9bfebddb29f23b59fa213e22d48df55aa330eb77d2e3ad992a4256/pennylane_lightning-0.42.0.dev11-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-lightning-kokkos @ https://test-files.pythonhosted.org/packages/76/75/6ca3384f9cffd5ac87b2a443aafa5d6759e1bf9794f0a13cd6513a7ebb5e/pennylane_lightning_kokkos-0.42.0.dev11-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-catalyst @ file:///Users/yannick/Documents/TUM/CDA/Research/playgrounds/Catalyst/catalyst/dist/pennylane_catalyst-0.12.0.dev22-cp312-abi3-macosx_15_0_universal2.whl",
]
docs = [
  "furo>=2024.8.6",
  "myst-nb>=1.2.0",
  "setuptools-scm>=8.2",
  "sphinx-autoapi>=3.6.0",
  "sphinx-copybutton>=0.5.2",
  "sphinx-design>=0.6.1",
  "sphinxcontrib-bibtex>=2.6.3",
  "sphinxcontrib-svg2pdfconverter>=1.3.0",
  "sphinxext-opengraph>=0.10.0",
  "openqasm-pygments>=0.1.2",
  "breathe>=4.36.0",
  "graphviz>=0.20.3",
  "sphinx>=7.4.7",
  "sphinx>=8.1.3; python_version >= '3.10'",
  "sphinx>=8.2.3; python_version >= '3.11'",
]
test = [
  "pytest>=8.3.5",
  "pytest-console-scripts>=1.4.1",
  "pytest-cov>=6.1.1",
  "numpy>=2.1; python_version >= '3.13'",
  "mqt-core>=3.0.0",
  "pennylane @ https://test-files.pythonhosted.org/packages/1d/98/77b1216322c6cb65f5e01896912d40bf2ec47ef059db90e009fde22d7100/pennylane-0.42.0.dev19-py3-none-any.whl",
  "pennylane-lightning @ https://test-files.pythonhosted.org/packages/c4/4e/ee935f9bfebddb29f23b59fa213e22d48df55aa330eb77d2e3ad992a4256/pennylane_lightning-0.42.0.dev11-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-lightning-kokkos @ https://test-files.pythonhosted.org/packages/76/75/6ca3384f9cffd5ac87b2a443aafa5d6759e1bf9794f0a13cd6513a7ebb5e/pennylane_lightning_kokkos-0.42.0.dev11-cp312-cp312-macosx_13_0_arm64.whl",
  "pennylane-catalyst @ file:///Users/yannick/Documents/TUM/CDA/Research/playgrounds/Catalyst/catalyst/dist/pennylane_catalyst-0.12.0.dev22-cp312-abi3-macosx_15_0_universal2.whl",
]
dev = [
  {include-group = "build"},
  {include-group = "docs"},
  {include-group = "test"},
]
