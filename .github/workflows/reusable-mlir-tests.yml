name: 🐉 • Tests
on:
  workflow_call:

jobs:
  mlir:
    name: >-
      ${{ contains(matrix.os, 'ubuntu') && '🐧' || contains(matrix.os, 'windows') && '🏁' || '🍎' }}
      ${{ matrix.coverage && 'Coverage' || matrix.os }} with LLVM@${{ matrix.llvm-version }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            ubuntu-24.04,
            ubuntu-24.04-arm,
            macos-13,
            macos-14,
            windows-2025,
            windows-11-arm,
          ]
        llvm-version: [19, 20]
        coverage: [false]
        include:
          - os: ubuntu-24.04
            llvm-version: 19
            coverage: true
          - os: ubuntu-24.04
            llvm-version: 20
            coverage: true
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # OS-specific toolchain setup
      - name: Setup LLVM/MLIR (Linux/macOS)
        if: runner.os != 'Windows'
        run: bash .github/scripts/setup-mlir.sh ${{ matrix.llvm-version }}

      - name: Restore LLVM/MLIR cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        id: mlir-cache
        with:
          path: llvm-install
          key: ${{ runner.os }}-llvm-${{ matrix.llvm-version }}

      - name: Setup LLVM/MLIR (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "${{ github.workspace }}\.github\scripts\setup-mlir.ps1" -MajorVersion ${{ matrix.llvm-version }} -InstallPrefix "${{ github.workspace }}\llvm-install"

      # Build acceleration and Python tooling
      - name: Setup ccache (Linux and macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          override_cache_key: mlir-${{ matrix.coverage && 'coverage' || 'tests' }}-${{ runner.os }}-${{ matrix.llvm-version }}

      - name: Set up mold as linker (Linux)
        uses: rui314/setup-mold@v1

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          activate-environment: true

      - name: Install Ninja
        run: uv tool install ninja

      - name: Install lit
        run: uv pip install lit

      # Configure
      - name: Configure CMake
        shell: bash
        run: |
          if command -v lit >/dev/null 2>&1; then
            LIT_BIN="$(command -v lit)"
          elif [[ "${RUNNER_OS:-}" == "Windows" ]]; then
            LIT_BIN="${GITHUB_WORKSPACE}\\.venv\\Scripts\\lit.exe"
          else
            LIT_BIN="lit"
          fi

          if [[ "${RUNNER_OS:-}" == "Windows" ]]; then
            CMAKE_GEN=""
          else
            CMAKE_GEN="-G Ninja"
          fi

          cmake $CMAKE_GEN -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.coverage && 'Debug' || 'Release' }} \
            -DBUILD_MQT_CORE_MLIR=ON \
            -DLLVM_DIR=$LLVM_DIR \
            -DMLIR_DIR=$MLIR_DIR \
            -DLLVM_EXTERNAL_LIT=$LIT_BIN \
            ${{ matrix.coverage && '-DENABLE_COVERAGE=ON' || '' }}

      # Build
      - name: Build MLIR lit target
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-lit-test-build-only

      - name: Build MLIR unittests
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-translation-test

      # Test
      - name: Run lit tests
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-lit-test

      - name: Run unit tests
        run: ctest -C ${{ matrix.coverage && 'Debug' || 'Release' }} --output-on-failure --test-dir build/mlir --repeat until-pass:3 --timeout 600

      # Coverage
      - name: Generate coverage data as JSON (gcovr)
        if: matrix.coverage
        run: |
          uvx gcovr \
             --gcov-executable "/usr/lib/llvm-${{ matrix.llvm-version }}/bin/llvm-cov gcov" \
             --exclude build \
             --exclude-unreachable-branches \
             --exclude-noncode-lines \
             --exclude-throw-branches \
             --print-summary \
             --keep \
             --json \
             -o coverage-llvm-${{ matrix.llvm-version }}.json

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v5
        with:
          flags: mlir
          name: mlir-coverage-llvm-${{ matrix.llvm-version }}
          fail_ci_if_error: true
          use_oidc: true
          files: coverage-llvm-${{ matrix.llvm-version }}.json
