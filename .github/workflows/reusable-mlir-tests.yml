name: üêâ ‚Ä¢ Tests
on:
  workflow_call:

jobs:
  mlir:
    name: >-
      ${{ contains(matrix.os, 'ubuntu') && 'üêß' || contains(matrix.os, 'windows') && 'üèÅ' || 'üçé' }}
      ${{ matrix.coverage && 'Coverage' || matrix.os }} with LLVM@${{ matrix.llvm-version }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # 21.1.0
          - { os: ubuntu-24.04, llvm: 21.1.0, targets: X86, family: linux }
          - {
              os: ubuntu-24.04-arm,
              llvm: 21.1.0,
              targets: AArch64,
              family: linux,
            }
          - { os: macos-14, llvm: 21.1.0, targets: AArch64, family: macos }
          - { os: macos-15-intel, llvm: 21.1.0, targets: X86, family: macos }
          - { os: windows2022, llvm: 21.1.0, targets: X86, family: windows }
          - {
              os: windows-11-arm,
              llvm: 21.1.0,
              targets: AArch64,
              family: windows,
            }
          # Specific commit
          - {
              os: ubuntu-24.04,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: X86,
              family: linux,
            }
          - {
              os: ubuntu-24.04-arm,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: AArch64,
              family: linux,
            }
          - {
              os: macos-14,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: AArch64,
              family: macos,
            }
          - {
              os: macos-15-intel,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: X86,
              family: macos,
            }
          - {
              os: windows2022,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: X86,
              family: windows,
            }
          - {
              os: windows-11-arm,
              llvm: 179d30f8c3fddd3c85056fd2b8e877a4a8513158,
              targets: AArch64,
              family: windows,
            }
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Setup LLVM+MLIR (optimized)
        id: toolchain
        uses: ./.github/actions/build-llvm-mlir-opt
        with:
          version: ${{ matrix.llvm }}
          targets: ${{ matrix.targets }}
          publish: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

      # Build acceleration and Python tooling
      - name: Set up mold as linker (Linux)
        uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
        with:
          python-version: 3.13
          activate-environment: true
          enable-cache: true
          save-cache: ${{ github.ref == 'refs/heads/main' }}

      - name: Install Ninja
        run: uv tool install ninja

      - name: Install lit
        run: uv pip install lit

      # Configure
      - name: Configure CMake (Linux and macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          cmake -G Ninja -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.coverage && 'Debug' || 'Release' }} \
            -DBUILD_MQT_CORE_MLIR=ON \
            -DLLVM_DIR=$LLVM_DIR \
            -DMLIR_DIR=$MLIR_DIR \
            -DLLVM_EXTERNAL_LIT=$(which lit) \
            ${{ matrix.coverage && '-DENABLE_COVERAGE=ON' || '' }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=${{ matrix.coverage && 'Debug' || 'Release' }} `
            -DBUILD_MQT_CORE_MLIR=ON `
            -DLLVM_DIR="${{ github.workspace }}\llvm-install\lib\cmake\llvm" `
            -DMLIR_DIR="${{ github.workspace }}\llvm-install\lib\cmake\mlir" `
            -DLLVM_EXTERNAL_LIT=${{ github.workspace }}\.venv\Scripts\lit.exe `
            ${{ matrix.coverage && '-DENABLE_COVERAGE=ON' || '' }}

      # Build
      - name: Build MLIR lit target
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-lit-test-build-only

      - name: Build MLIR unittests
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-translation-test

      # Test
      - name: Run lit tests
        run: cmake --build build --config ${{ matrix.coverage && 'Debug' || 'Release' }} --target mqt-core-mlir-lit-test

      - name: Run unit tests
        run: ctest -C ${{ matrix.coverage && 'Debug' || 'Release' }} --output-on-failure --test-dir build/mlir --repeat until-pass:3 --timeout 600

      # Coverage
      - name: Generate coverage data as JSON (gcovr)
        if: matrix.coverage
        run: |
          uvx gcovr \
             --gcov-executable "/usr/lib/llvm-${{ matrix.llvm-version }}/bin/llvm-cov gcov" \
             --exclude build \
             --exclude-unreachable-branches \
             --exclude-noncode-lines \
             --exclude-throw-branches \
             --print-summary \
             --keep \
             --json \
             -o coverage-llvm-${{ matrix.llvm-version }}.json

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: mlir
          name: mlir-coverage-llvm-${{ matrix.llvm-version }}
          fail_ci_if_error: true
          use_oidc: true
          files: coverage-llvm-${{ matrix.llvm-version }}.json
