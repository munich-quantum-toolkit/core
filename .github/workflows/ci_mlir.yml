name: MLIR CI
on:
  push:
    branches:
      - main
    paths:
      - "mlir/**"
  pull_request:
    paths:
      - "mlir/**"
      - ".github/workflows/ci_mlir.yml"
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  cpp-test-mlir:
    if: false # Skip this job during debugging
    name: üêß Test MLIR with LLVM@${{ matrix.llvm-version }}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        llvm-version: [19, 20]
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3
    steps:
      # check out the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # install a specific version of the LLVM toolchain
      - name: Install llvm and mlir
        run: |
          sudo apt-get update
          wget https://apt.llvm.org/llvm.sh -O ${{ runner.temp }}/llvm_install.sh
          chmod +x ${{ runner.temp }}/llvm_install.sh
          if sudo ${{ runner.temp }}/llvm_install.sh ${{ matrix.llvm-version }}; then
            sudo apt-get install -y libmlir-${{ matrix.llvm-version }}-dev \
                                    mlir-${{ matrix.llvm-version }}-tools \
                                    clang-${{ matrix.llvm-version}} \
             || exit 1
          else
            echo "Installation from script failed."
            exit 1
          fi
          echo "CC=clang-${{ matrix.llvm-version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.llvm-version }}" >> $GITHUB_ENV
          echo "MLIR_DIR=/usr/lib/llvm-${{ matrix.llvm-version }}/lib/cmake/mlir" >> $GITHUB_ENV
          echo "LLVM_DIR=/usr/lib/llvm-${{ matrix.llvm-version }}/lib/cmake/llvm" >> $GITHUB_ENV

      # set up ccache for faster C++ builds
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          override_cache_key: c++-tests-mlir

      # set up mold as linker for faster C++ builds
      - name: Set up mold as linker
        uses: rui314/setup-mold@v1

      # set up uv for faster Python package management
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          activate-environment: true

      # make sure ninja is installed
      - name: Install Ninja
        run: uv tool install ninja

      # make sure the lit test runner is installed
      - name: Install lit
        run: uv pip install lit

      # configure the project with CMake
      - name: Configure CMake for MLIR
        run: |
          cmake -G Ninja -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_MQT_CORE_MLIR=ON \
            -DLLVM_EXTERNAL_LIT=$(which lit)

      # build the project and run the tests
      - name: Build MLIR components and directly run lit tests
        run: cmake --build build --config Release --target check-quantum-opt

  cpp-test-mlir-windows:
    if: false # Skip this job during debugging
    name: üèÅ Test MLIR with LLVM@${{ matrix.llvm-version }}
    runs-on: windows-latest
    strategy:
      matrix:
        llvm-version: [19, 20]
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3
    outputs:
      llvm-latest-tag: ${{ steps.get-latest.outputs.latest }}
    steps:
      # check out the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find latest release of llvm-project
        id: get-latest
        run: |
          $tag = git ls-remote --tags https://github.com/llvm/llvm-project.git "llvmorg-${{ matrix.llvm-version }}.*" |
                  Where-Object { $_ -match "llvmorg-\d+\.\d+\.\d+" } |
                  Sort-Object -Property {
                    if ($_ -match "llvmorg-(\d+)\.(\d+)\.(\d+)") {
                      [int]$Matches[1]*10000 + [int]$Matches[2]*100 + [int]$Matches[3]
                    }
                  } |
                  Select-Object -Last 1
          $latest = $tag | ForEach-Object {
                  if ($_ -match "refs/tags/llvmorg-(\d+\.\d+\.\d+)") {
                    $Matches[1]  # Extract just the version number (e.g., "20.1.0")
                  }
                } |
                Where-Object { $_ -ne $null }
          echo "Latest tag: $tag"
          echo "latest=$latest" >> $env:GITHUB_OUTPUT

      - name: Try to get MLIR from cache
        uses: actions/cache@v4
        id: mlir-cache
        with:
          path: ${{ github.workspace }}/llvm-install
          key: ${{ runner.os }}-llvm-${{ steps.get-latest.outputs.latest }}
          restore-keys: |
            ${{ runner.os }}-llvm-${{ steps.get-latest.outputs.latest }}

      # build the llvm-project from source
      - name: Install llvm and mlir
        if: steps.mlir-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/llvm/llvm-project.git --branch llvmorg-${{ steps.get-latest.outputs.latest }}
          cd llvm-project
          cmake -S llvm -B build_llvm `
            -DLLVM_ENABLE_PROJECTS=mlir `
            -DLLVM_BUILD_EXAMPLES=OFF `
            -DLLVM_TARGETS_TO_BUILD="X86" `
            -DCMAKE_BUILD_TYPE=Release `
            -DLLVM_BUILD_TESTS=OFF `
            -DLLVM_INCLUDE_TESTS=OFF `
            -DLLVM_INCLUDE_EXAMPLES=OFF `
            -DLLVM_ENABLE_ASSERTIONS=ON `
            -DLLVM_ENABLE_UTILS=ON `
            -DLLVM_INSTALL_UTILS=ON `
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\llvm-install
          cmake --build build_llvm --target install --config Release

      # install uv
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          activate-environment: true

      # make sure the lit test runner is installed
      - name: Install lit
        run: |
          uv pip install lit
          echo "LLVM_EXTERNAL_LIT=$(which lit)" >> $GITHUB_ENV

      # configure the project with CMake
      - name: Configure CMake for MLIR
        run: |
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_MQT_CORE_MLIR=ON `
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}\llvm-install `
            -DLLVM_EXTERNAL_LIT=${{ github.workspace }}\.venv\Scripts\lit.exe

      # build the project and run the tests
      - name: Build MLIR components and directly run lit tests
        run: |
          cmake --build build --config Release --target quantum-opt

          $targetPath = "${{ github.workspace }}\\build\\mlir\\tools\\quantum-opt\\Release\\quantum-opt.exe"
          $batchContent = '"{0}" "$@"' -f $targetPath

          # Write to a directory that's definitely in PATH
          $batchContent | Out-File -FilePath "C:\Windows\quantum-opt" -Encoding ascii

          # Verify the batch file
          Get-Content "C:\Windows\quantum-opt"
          Write-Output "Batch file created at C:\Windows\quantum-opt pointing to $targetPath"

          cmake --build build --config Release --target check-quantum-opt

  cpp-test-mlir-plugin-macos-homebrew:
    name: üçé Test mqt-catalyst-plugin with LLVM@${{ matrix.llvm-version }}
    runs-on: macos-14
    strategy:
      matrix:
        llvm-version: [19]
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv for Python 3.13
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          activate-environment: true

      - name: Setup Python path
        run: |
          echo "Using Python: $(which python)"
          echo "Python_EXECUTABLE=$(which python)" >> $GITHUB_ENV
          echo "PYTHON=$(which python)" >> $GITHUB_ENV

      - name: Install pytest, scikit-build-core, and Catalyst
        # Use pre-release Catalyst to include latest features
        # Make sure to use stable urllib3 to avoid issues with requests
        run: |
          uv pip install pytest scikit-build-core
          uv pip install \
            --extra-index-url https://test.pypi.org/simple \
            --index-strategy unsafe-best-match \
            --prerelease=allow \
            "PennyLane-Catalyst==0.12.0.dev51" \
            "urllib3==2.4.0"

      - name: Install llvm (mlir), lit, and ninja
        run: |
          brew install llvm@${{ matrix.llvm-version }} lit ninja

      - name: Set LLVM, MLIR, and lit paths
        run: |
          echo "MLIR_DIR=/opt/homebrew/opt/llvm@${{ matrix.llvm-version }}/lib/cmake/mlir" >> $GITHUB_ENV
          echo "LLVM_DIR=/opt/homebrew/opt/llvm@${{ matrix.llvm-version }}/lib/cmake/llvm" >> $GITHUB_ENV
          echo "LLVM_EXTERNAL_LIT=/opt/homebrew/bin/lit" >> $GITHUB_ENV

      - name: Build and install mqt-catalyst-plugin
        run: |
          cd plugins/catalyst/python
          uv sync \
            --config-settings=cmake.define.Python_EXECUTABLE=$Python_EXECUTABLE \
            --config-settings=cmake.define.LLVM_EXTERNAL_LIT=$LLVM_EXTERNAL_LIT \
            --config-settings=cmake.define.MLIR_DIR=$MLIR_DIR \
            --config-settings=cmake.define.LLVM_DIR=$LLVM_DIR \
            --inexact --no-dev --no-build-isolation-package mqt-catalyst-plugin --active --verbose

      - name: Run mqt-catalyst-plugin tests
        # Currently only plugin setup can be tested with homebrew LLVM
        run: |
          cd plugins/catalyst/python
          pytest test/test_plugin_setup.py

  cpp-test-mlir-plugin-macos-from-source:
    name: üçé Test mqt-catalyst-plugin with Catalyst and LLVM (MLIR) from source
    runs-on: macos-14
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      CTEST_PARALLEL_LEVEL: 4
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv for Python 3.13
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13
          activate-environment: true

      - name: Setup Python path
        run: |
          echo "Using Python: $(which python)"
          echo "Python_EXECUTABLE=$(which python)" >> $GITHUB_ENV
          echo "PYTHON=$(which python)" >> $GITHUB_ENV

      - name: Install lit, pytest, and scikit-build-core
        run: |
          uv pip install lit pytest scikit-build-core

      - name: Set lit path
        run: |
          echo "LLVM_EXTERNAL_LIT=$(which lit)" >> $GITHUB_ENV

      # This is the recommended way to install Catalyst from source
      - name: Install Catalyst prerequisites
        run: |
          xcode-select --install || true
          uv pip install 'cmake<4' ninja
          brew install libomp ccache gfortran
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      - name: Clone Catalyst (shallow, with submodules)
        run: |
          git clone --recurse-submodules --shallow-submodules https://github.com/PennyLaneAI/catalyst.git

      - name: Install Catalyst requirements
        run: |
          cd catalyst
          uv pip install -r requirements.txt

      - name: Build Catalyst from source
        run: |
          cd catalyst
          make all

      - name: Set LLVM and MLIR paths
        run: |
          echo "MLIR_DIR=$(pwd)/catalyst/mlir/llvm-project/build/lib/cmake/mlir" >> $GITHUB_ENV
          echo "LLVM_DIR=$(pwd)/catalyst/mlir/llvm-project/build/lib/cmake/llvm" >> $GITHUB_ENV

      - name: Build and install mqt-catalyst-plugin
        run: |
          cd plugins/catalyst/python
          uv sync \
            --config-settings=cmake.define.Python_EXECUTABLE=$Python_EXECUTABLE \
            --config-settings=cmake.define.MLIR_DIR=$MLIR_DIR \
            --config-settings=cmake.define.LLVM_DIR=$LLVM_DIR \
            --config-settings=cmake.define.LLVM_EXTERNAL_LIT=$LLVM_EXTERNAL_LIT \
            --inexact --no-dev --no-build-isolation-package mqt-catalyst-plugin --active --verbose

      - name: Set DYLD_LIBRARY_PATH
        # Ensure the shared library is found during tests
        # TODO: Why even necessary?
        run: |
          cd plugins/catalyst/python
          echo "DYLD_LIBRARY_PATH=$(find build -type f -name 'libmqt-core-ir*.dylib' -exec dirname {} \; | head -n1)" >> $GITHUB_ENV

      - name: Run mqt-catalyst-plugin tests
        # Test the plugin execution
        run: |
          cd plugins/catalyst/python
          DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH pytest test/test_plugin.py
